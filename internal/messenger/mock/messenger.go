// Code generated by MockGen. DO NOT EDIT.
// Source: internal/messenger/messenger.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	messenger "github.com/GeovaneCavalcante/ms-notificator/internal/messenger"
	gomock "github.com/golang/mock/gomock"
)

// MockMessenger is a mock of Messenger interface.
type MockMessenger struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerMockRecorder
}

// MockMessengerMockRecorder is the mock recorder for MockMessenger.
type MockMessengerMockRecorder struct {
	mock *MockMessenger
}

// NewMockMessenger creates a new mock instance.
func NewMockMessenger(ctrl *gomock.Controller) *MockMessenger {
	mock := &MockMessenger{ctrl: ctrl}
	mock.recorder = &MockMessengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessenger) EXPECT() *MockMessengerMockRecorder {
	return m.recorder
}

// PublishMessage mocks base method.
func (m *MockMessenger) PublishMessage(message string) (*messenger.MessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMessage", message)
	ret0, _ := ret[0].(*messenger.MessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishMessage indicates an expected call of PublishMessage.
func (mr *MockMessengerMockRecorder) PublishMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessage", reflect.TypeOf((*MockMessenger)(nil).PublishMessage), message)
}
