// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Notificator"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/notifications": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notification"
                ],
                "summary": "sending or scheduling notification",
                "operationId": "notification-manager",
                "parameters": [
                    {
                        "description": "data for shipping or scheduling",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.NotificationData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "error handling with body: {error_message}"
                    },
                    "500": {
                        "description": "could not send notification: {error_message}"
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.NotificationData": {
            "type": "object",
            "properties": {
              "rawMessage": {
                "type": "string",
                "description": "The raw message"
              },
              "dateScheduling": {
                "type": "string",
                "description": "The scheduling date of the notification"
              },
              "userId": {
                "type": "string",
                "description": "The user id who will receive the notification"
              }
            },
            "required": [
              "rawMessage",
              "userId"
            ]
        },
        "notification.Status": {
            "type": "string",
            "enum": ["delivered", "pending", "error"],
            "description": "The status of the scheduled notification"
        },
        "notification.Notification": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the notification"
              },
              "rawMessage": {
                "type": "string",
                "description": "The raw message"
              },
              "userId": {
                "type": "string",
                "description": "The user id who will receive the notification"
              }
            },
            "required": [
              "id",
              "rawMessage",
              "userId"
            ]
          },
          "notification.ScheduledNotification": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the scheduled notification"
              },
              "notification": {
                "$ref": "#/definitions/notification.Notification",
                "description": "The related notification"
              },
              "dateScheduling": {
                "type": "string",
                "format": "date-time",
                "description": "The scheduling date of the notification"
              },
              "status": {
                "$ref": "#/definitions/Status",
                "description": "The status of the scheduled notification"
              }
            },
            "required": [
              "id",
              "notification",
              "dateScheduling",
              "status"
            ]
        },
        "preference.PreferenceNotification": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the preference notification"
              },
              "userId": {
                "type": "string",
                "description": "The user id who has this preference"
              },
              "rateLimit": {
                "type": "integer",
                "format": "int32",
                "description": "The rate limit for notifications"
              },
              "channels": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The channels for notifications"
              },
              "allow": {
                "type": "boolean",
                "description": "Allow notifications"
              }
            },
            "required": [
              "id",
              "userId",
              "rateLimit",
              "channels",
              "allow"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "MS Notificator",
	Description:      "Endpoints disponíveis no microsserviço.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
