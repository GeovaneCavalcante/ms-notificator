// Code generated by MockGen. DO NOT EDIT.
// Source: notification/notification.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	notification "github.com/GeovaneCavalcante/ms-notificator/notification"
	gomock "github.com/golang/mock/gomock"
)

// MockNotificationRepository is a mock of NotificationRepository interface.
type MockNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepositoryMockRecorder
}

// MockNotificationRepositoryMockRecorder is the mock recorder for MockNotificationRepository.
type MockNotificationRepositoryMockRecorder struct {
	mock *MockNotificationRepository
}

// NewMockNotificationRepository creates a new mock instance.
func NewMockNotificationRepository(ctrl *gomock.Controller) *MockNotificationRepository {
	mock := &MockNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepository) EXPECT() *MockNotificationRepositoryMockRecorder {
	return m.recorder
}

// CreateNotification mocks base method.
func (m *MockNotificationRepository) CreateNotification(n *notification.Notification) (*notification.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", n)
	ret0, _ := ret[0].(*notification.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockNotificationRepositoryMockRecorder) CreateNotification(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockNotificationRepository)(nil).CreateNotification), n)
}

// MockScheduledNotificationRepository is a mock of ScheduledNotificationRepository interface.
type MockScheduledNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScheduledNotificationRepositoryMockRecorder
}

// MockScheduledNotificationRepositoryMockRecorder is the mock recorder for MockScheduledNotificationRepository.
type MockScheduledNotificationRepositoryMockRecorder struct {
	mock *MockScheduledNotificationRepository
}

// NewMockScheduledNotificationRepository creates a new mock instance.
func NewMockScheduledNotificationRepository(ctrl *gomock.Controller) *MockScheduledNotificationRepository {
	mock := &MockScheduledNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockScheduledNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduledNotificationRepository) EXPECT() *MockScheduledNotificationRepositoryMockRecorder {
	return m.recorder
}

// CreateScheduledNotification mocks base method.
func (m *MockScheduledNotificationRepository) CreateScheduledNotification(n *notification.ScheduledNotification) (*notification.ScheduledNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScheduledNotification", n)
	ret0, _ := ret[0].(*notification.ScheduledNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScheduledNotification indicates an expected call of CreateScheduledNotification.
func (mr *MockScheduledNotificationRepositoryMockRecorder) CreateScheduledNotification(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduledNotification", reflect.TypeOf((*MockScheduledNotificationRepository)(nil).CreateScheduledNotification), n)
}

// ListScheduledNotifications mocks base method.
func (m *MockScheduledNotificationRepository) ListScheduledNotifications(status string) ([]*notification.ScheduledNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScheduledNotifications", status)
	ret0, _ := ret[0].([]*notification.ScheduledNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScheduledNotifications indicates an expected call of ListScheduledNotifications.
func (mr *MockScheduledNotificationRepositoryMockRecorder) ListScheduledNotifications(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScheduledNotifications", reflect.TypeOf((*MockScheduledNotificationRepository)(nil).ListScheduledNotifications), status)
}

// UpdateStatusByID mocks base method.
func (m *MockScheduledNotificationRepository) UpdateStatusByID(ctx context.Context, ID string, status notification.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusByID", ctx, ID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusByID indicates an expected call of UpdateStatusByID.
func (mr *MockScheduledNotificationRepositoryMockRecorder) UpdateStatusByID(ctx, ID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusByID", reflect.TypeOf((*MockScheduledNotificationRepository)(nil).UpdateStatusByID), ctx, ID, status)
}

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateScheduledNotification mocks base method.
func (m *MockUseCase) CreateScheduledNotification(n notification.Notification, dateScheduling string) (*notification.ScheduledNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScheduledNotification", n, dateScheduling)
	ret0, _ := ret[0].(*notification.ScheduledNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScheduledNotification indicates an expected call of CreateScheduledNotification.
func (mr *MockUseCaseMockRecorder) CreateScheduledNotification(n, dateScheduling interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduledNotification", reflect.TypeOf((*MockUseCase)(nil).CreateScheduledNotification), n, dateScheduling)
}

// ManageNotification mocks base method.
func (m *MockUseCase) ManageNotification(ctx context.Context, notification notification.Notification, dateScheduling string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManageNotification", ctx, notification, dateScheduling)
	ret0, _ := ret[0].(error)
	return ret0
}

// ManageNotification indicates an expected call of ManageNotification.
func (mr *MockUseCaseMockRecorder) ManageNotification(ctx, notification, dateScheduling interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManageNotification", reflect.TypeOf((*MockUseCase)(nil).ManageNotification), ctx, notification, dateScheduling)
}

// SendNoticiation mocks base method.
func (m *MockUseCase) SendNoticiation(ctx context.Context, notification notification.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNoticiation", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNoticiation indicates an expected call of SendNoticiation.
func (mr *MockUseCaseMockRecorder) SendNoticiation(ctx, notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNoticiation", reflect.TypeOf((*MockUseCase)(nil).SendNoticiation), ctx, notification)
}
